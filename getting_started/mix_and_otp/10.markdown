在这最后一章,我们将回到`:kv`应用程序然后添加一个路由层,允许我们分发基于桶名字节点之间的请求。

路由层将收到一个下面格式的路由表:

    [{?a..?m, :"foo@computer-name"},
     {?n..?z, :"bar@computer-name"}]

路由器在路由表内检索“桶”名的第一个字节，然后根据检索结果分派合适的节点。例如，一个“桶”的名称以"a"开头(`?a`表示字母"a"的unicode码位)将会被分派到`foo@computer-name`节点。

如果匹配的条目指向处理请求的节点，路由工作就完成了，这个节点将会执行请求的操作。如果匹配的条目指向一个不同的节点，将请求传递都这个节点，然后根据自己的路由表（可能和第一个节点的路由表不同）执行。如果没有条目匹配，将会抛出错误。

你或许想知道为什么不让由自己路由表查找到的节点直接处理操作，而是传递路由请求到那个处理。像上面这样简单的路由表或许要在所有节点之间共享，以这种方式传递路由请求的原因是随着应用程序增长，可以更简单的将路由表分成较小的部分。或许以后,`foo@computer-name`只会负责“桶”的路由请求,桶处理器则会被派往不同的节点。这样,`bar@computer-name`不需要知道任何变化的信息。

> 注意：本章我们将在一台机器上使用两个节点。你也可以使用同一网络环境中两个（或更多）的机器，前提是要做预备工作。首先，要确保所有机器的`～/.erlang.cookie`文件内有相同的值。其次，确保[epmd](http://www.erlang.org/doc/man/epmd.html)运行的端口没有被阻拦（可以使用`epmd -d`获取调试信息）。如果你想学习更多关于分布的常用信息，我们建议看看[Learn You Some Erlang的Distribunomicon这一章](http://learnyousomeerlang.com/distribunomicon)。

## 10.1 我们第一个分布式代码

Elixir提供了节点间连接和交换信息的工具。实际上，在分布式环境下，进程、消息传递和接收这些概念都不变，因为 Elixir进程是*位置透明*。也就是说发送一个消息时，接收消息的进程在相同或不同的节点不重要，虚拟机都可以传递消息。

为了执行分布式代码，需要以一个名字启动虚拟机。名字可短（相同网络环境下）可长（需要完整计算机地址）。让我们启动一个新的IEx会话：

    $ iex --sname foo

现在可以看到提示符发生了一些变化，计算机名后显示了节点名称：

    Interactive Elixir - press Ctrl+C to exit (type h() ENTER for help)
    iex(foo@jv)1>

我计算机的名字是`jv`，所以上面的例子看到的是`foo@jv`，你会有不同的显示。接下来的例子，我们将使用`jv@computer-name`作为名字，根据尝试的代码你应该更新它们的值。

让我们在shell里定义一个叫`Hello`模块名：

```iex
iex> defmodule Hello do
...>  def world, do: IO.puts "hello world"
...> end
```

如果在相同网络里，有另外一个装好Erlang和Elixir的计算机，你可以开启在这个计算机上开启另一个shell。没有俩电脑的话，直接在另一个终端中开启一个新IEx会话。两种情况下都使用`bar`作为短名字：

    $ iex --sname bar

注意在新的IEx会话中，我们无法使用`Hello.world/0`函数：

```iex
iex> Hello.world
** (UndefinedFunctionError) undefined function: Hello.world/0
    Hello.world()
```

然而我们可以在`bar@computer-name`上给`foo@computer-name`节点生成一个新进程!让我们试一试（`@computer-name`是你本地看到名字）：

```iex
iex> Node.spawn_link :"foo@computer-name", fn -> Hello.world end
#PID<9014.59.0>
hello world
```

Elixir在另外节点生成一个进程然后返回它的进程号。代码将会在其他节点调用已存在的`Hello.world/0`函数。注意到结果"hello world"是在当前节点`bar`而不是`foo`节点打印出来的。换句话说，消息将会从`foo`节点发回到`bar`节点。会发生这样的情况是因为在其他节点(`foo`)生成的进程的进程组长(group leader)是当前节点(`bar`)。我们在[IO章节](http://elixir-lang.org/getting_started/12.html)简要的谈到过进程组长。

我们照样可以给`Node.spawn_link/2`返回的进程号发送和接收信息。让我们试一试ping-pong：

```iex
iex> pid = Node.spawn_link :"foo@computer-name", fn ->
...>   receive do
...>     {:ping, client} -> send client, :pong
...>   end
...> end
#PID<9014.59.0>
iex> send pid, {:ping, self}
{:ping, #PID<0.73.0>}
iex> flush
:pong
:ok
```

以我们的快速的了解,可以得出这样的结论:当需要进行分布式计算时，应该直接使用`Node.spawn_link/2`函数在远程节点上生成进程。然而通过之前的教程学习了应该尽可能的避免在监控树外生成进程，所以我们需要另外的解决方法。

有三个比`Node.spawn_link/2`更好的选择：

1. 使用Erlang的[:rpc](http://erlang.org/doc/man/rpc.html)模块，进行远程节点调用执行。在`bar@computer-name`节点的shell中调用`:rpc.call(:"foo@computer-name", Hello, :world, [])`将会打印"hello world"信息。

2. 让服务器运行在其他节点，然后使用[GenServer](http://elixir-lang.org/docs/stable/elixir/GenServer.html)API向这个节点发送请求。例如，你可以使用`GenServer.call({name, node}, arg)`函数向一个远程命名服务器发送请求，或者直接将远端的进程号作为第一个参数进行传递。

3. 上一章使用的任务(tasks)模块，因为在本地和远程节点都可以生成。

上面的方法有不同的特点。使用通用服务器和`:rpc`将会在一个单独的服务器依次接收请求，任务则很有效率的在远程节点异步执行，只有生成进程是由监控器依次完成。

对与我们的路由层，将使用任务模块，你也可以尝试使用其他方法。

## 10.2 异步/等待

目前我们已经知道任务是隔离运行且对于返回值是不关心的。然而，有时候执行计算任务并读取返回的结果也是很有用的。因此，任务模块同样提供了`async/await`模式：

```elixir
task = Task.async(fn -> compute_something_expensive end)
res  = compute_something_else()
res + Task.await(task)
```

`async/await`为计算提供了一个非常简单的并行机制。不仅如此，和之前章节一样，`async/await`也可以用来和[`Task.Supervisor`](http://elixir-lang.org/docs/stable/elixir/Task.Supervisor.html)搭配。只需要将`Task.Supervisor.start_child/2`代替为`Task.Supervisor.async/2`，用`Task.await/2`读取结果。

## 10.3 分布式任务

分布式任务和被监控的任务一样。唯一不同的是生成任务的时候我们将节点的名字传递给监控器。打开`:kv`的`lib/kv/supervisor.ex`文件，让我们在监控树中增加一个任务监控器：

```elixir
supervisor(Task.Supervisor, [[name: KV.RouterTasks]]),
```

现在在`:kv`程序内开启两个命名节点：

    $ iex --sname foo -S mix
    $ iex --sname bar -S mix

在`bar@computer-name`节点，通过监控器就可以直接生成一个任务：

```iex
iex> task = Task.Supervisor.async {KV.RouterTasks, :"foo@computer-name"}, fn ->
...>   {:ok, node()}
...> end
%Task{pid: #PID<12467.88.0>, ref: #Reference<0.0.0.400>}
iex> Task.await(task)
{:ok, :"foo@computer-name"}
```

我们第一个分布式任务很简单：获取正在运行任务的节点名。知道了这个，最后让我们编写路由编码：

## 10.4 路由层

用以下内容创建`lib/kv/router.ex`文件:

```elixir
defmodule KV.Router do
  @doc """
  Dispatch the given `mod`, `fun`, `args` request
  to the appropriate node based on the `bucket`.
  """
  def route(bucket, mod, fun, args) do
    # Get the first byte of the binary
    first = :binary.first(bucket)

    # Try to find an entry in the table or raise
    entry =
      Enum.find(table, fn {enum, node} ->
        first in enum
      end) || no_entry_error(bucket)

    # If the entry node is the current node
    if elem(entry, 1) == node() do
      apply(mod, fun, args)
    else
      sup = {KV.RouterTasks, elem(entry, 1)}
      Task.Supervisor.async(sup, fn ->
        KV.Router.route(bucket, mod, fun, args)
      end) |> Task.await()
    end
  end

  defp no_entry_error(bucket) do
    raise "could not find entry for #{inspect bucket} in table #{inspect table}"
  end

  @doc """
  The routing table.
  """
  def table do
    # Replace computer-name with your local machine name.
    [{?a..?m, :"foo@computer-name"},
     {?n..?z, :"bar@computer-name"}]
  end
end
```

让我们写一个测试来确认路由器工作。创建一个名为`test/kv/router_test.exs`包含下面内容：

```elixir
defmodule KV.RouterTest do
  use ExUnit.Case, async: true

  test "route requests accross nodes" do
    assert KV.Router.route("hello", Kernel, :node, []) ==
           :"foo@computer-name"
    assert KV.Router.route("world", Kernel, :node, []) ==
           :"bar@computer-name"
  end

  test "raises on unknown entries" do
    assert_raise RuntimeError, ~r/could not find entry/, fn ->
      KV.Router.route(<<0>>, Kernel, :node, [])
    end
  end
end
```

第一个测试直接调用`Kernel.node/0`函数，基于“桶”名"hello"和"world"返回当前的节点名。根据我们目前的路由表，我们应该分别得到`foo@computer-name`和`bar@computer-name`回应。

第二个测试为了检查未知条目，抛出错误。

为了执行第一个测试，我们需要运行两个节点。让我们重启将要被测试使用的节点`bar`：

    $ iex --sname bar -S mix

用以下命令执行测试：

    $ elixir --sname foo -S mix test

我们测试应该成功通过。太好了！

## 10.5 测试的过滤器和标签

尽管我们测试通过了，但是我们测试结构变的更复杂了。特别是使用`mix test`执行测试会导致测试失败，因为我们的测试需要连接到另一个节点。

幸运的是，ExUnit附带了一个标记测试的工具，基于标签,允许执行指定的回调，甚至过滤测试。

给测试加一个标签所有需要做的就是在测试名前调用`@tag`。回到`test/kv/router_test.exs`,增加一个`:distributed`标签：

```elixir
@tag :distributed
test "route requests accross nodes" do
```

`@tag :distributed`相当于`@tag distributed: true`

合适的增加标签，我们就可以检查节点是否在线，若不在线就可以排除分布式测试。打开`:kv`程序内的`test/test_helper.exs`文件，添加如下代码：

```elixir
exclude =
  if Node.alive?, do: [], else: [distributed: true]

ExUnit.start(exclude: exclude)
```

现在用`mix test`执行测试：

    $ mix test
    Excluding tags: [distributed: true]

    .......

    Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
    7 tests, 0 failures

这次的测试会通过，ExUnit警告我们分布式测试被排除了。如果你使用`$ elixir --sname foo -S mix test`执行测试，会多执行一个测试（就是那个被排除的分布式测试），而且只要`bar@computer-name`可用，测试就会成功！

`mix test`命令同样允许动态的包含和排除标签。例如，可以运行`$ mix test --include distributed`执行分布式测试而忽略`test/test_helper.exs`里的值。也可以给命令行传递`--exclude`选项来排除特定的标签。`--only`可以用来只运行特定的标签:

    $ elixir --sname foo -S mix test --only distributed

你可以在[`ExUnit.Case`模块文档](http://elixir-lang.org/docs/stable/ex_unit/ExUnit.Case.html)中读到更多关于过滤器、标签和默认标签。

## 10.6 程序环境与配置

目前我们将路由表硬编码进了`KV.Router`模块。然而，我们需要动态的路由表，这样我们就不仅可以配置开发/测试/生产，而且允许不同的节点拥有不同的路由表条目。OTP提供了这样的功能：程序环境。

每个应用程序都有一个环境存储特定于应用程序的配置。例如，我们可以在`:kv`程序环境存储路由表，设置默认值、需要的时候允许其他程序进行修改。

打开`apps/kv/mix.exs`文件，修改`application/0`函数：

```elixir
def application do
  [applications: [],
   env: [routing_table: []],
   mod: {KV, []}]
end
```

我们给程序增加了一个新的`:env`键，它返回一个一个以`:routing_table`为键,空列表为值的条目的应用程序默认环境。因为路由表取决于测试/部署结构，所以给应用程序环境带上一个空的路由表是合理的。

为了在代码中使用程序环境变量，我们只需要用下面的定义代替`KV.Router.table/0`:

```elixir
@doc """
The routing table.
"""
def table do
  Application.get_env(:kv, :routing_table)
end
```

我们使用`Application.get_env/2`函数读取`:kv`环境的`:routing_table`条目。你可以在[程序模块](http://elixir-lang.org/docs/stable/elixir/Application.html)找到更多处理程序环境变量的信息和函数。

因为我们的路由表现在是空的，分布式的代码测试就会失败。重启程序并重新执行测试可以看到测试失败：

    $ iex --sname bar -S mix
    $ elixir --sname foo -S mix test --only distributed

有趣的是不仅可以修改当前程序的环境变量，还可以修改所有程序的环境变量。可以通过`config/config.exs`文件实现。例如，我们可以将IEx默认提示符修改为其他值。只要打开`apps/kv/config/config.exs`文件，追加下面的内容：

```elixir
config :iex, default_prompt: ">>>"
```

用`iex -S mix`打开IEx就可以看到提示符的变化。

也就是说同样可以直接在`config/config.exs`文件内设置`:routing_table`：

```elixir
# Replace computer-name with your local machine nodes.
config :kv, :routing_table,
       [{?a..?m, :"foo@computer-name"},
        {?n..?z, :"bar@computer-name"}]
```

重启节点后再次执行分布式代码测试，现在就应该全部通过。

每个程序都有自己的`config/config.exs`文件，它们之间是不共享的。配置可以针对每个环境设置。阅读`:kv`程序内配置文件的内容你就会知道怎么做。

基于配置文件不共享，当你从雨伞程序根目录执行测试，测试将会失败，因为我们刚刚增加的`:kv`在雨伞程序内是不可用的。但是打开雨伞项目的`config/config.exs`文件，就能看到如何从其他子程序导入配置。你只需要调用：

```elixir
import_config "../apps/kv/config/config.exs"
```

`mix run`命令也接受一个`--config`参数，允许按需载入配置文件。可用来根据每个节点自己特殊的配置（例如，不同的路由表）启动节点。

综合来说，内置的配置程序能力和以雨伞程序方式打造的软件在部署时给了我们很多选择，我们可以：

* 部署雨伞程序到一个节点，同时作为TCP服务器和键值存储

* 部署`:kv_server`程序，只用做TCP服务器且路由表只指向其他节点

* 当我们只需要一个存储节点的时候（无TCP连接）只部署`:kv`程序

在未来增加更多的应用程序,我们可以继续控制相同的粒度的部署,挑选哪些应用程序的配置用于生产环境。也可以考虑使用像[exrm](https://github.com/bitwalker/exrm)这样的工具像建立多个版本,将选择的程序和配置，包括Erlang和Elixir的安装进行打包，这样就算目标系统上没预装运行环境，我们也能进行程序部署。

最后，我们已经在本章学习了一些新东西，可以使用在`:kv_sever`程序上。我们将把下个步骤当做练习：

* 修改`:kv_server`，让它从程序环境变量读取端口号，取代使用硬编码端口值4040。

* 修改和配置`:kv_server`程序，使用路由功能代替直接分发到本地`KV.Registry`。对`:kv_server`测试，你可以让路由表直接指向自己当前节点。

## 10.7 总结

在这一章里,我们通过建立了一个简单的路由器来了解Elixir和Erlang虚拟机的分布式特性，并且学习了如何配置路由表。这是Mix和OTP教程的最后一章节。

通过本教程，我们已经构建了一个简单的分布式键值存储，借此机会也了解更多的像通用服务器，事件管理器，监控器，任务、agent和程序等这样的概念。不仅如此，我们也为整个程序写了测试，熟悉了ExUnit，也学习了如何使用构建工具Mix完成广泛的任务。

如果你在为生产环境寻找一个分布式键值存储程序，你肯定应该看看建立在Erlang虚拟机之上的[Riak](http://basho.com/riak/)。在Riak,为防止数据丢失，“桶”是被复制的；取代路由器，使用[一致哈希](http://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C)将”桶“映射到节点。当存储桶的新节点被添加进来的时候，一致哈希算法有助于减少迁移的数据量。　