上一章,用agent实现了我们的"桶"。在第一章，曾说过要给每个“桶”命名来实现如下功能：

```elixir
CREATE shopping
OK

PUT shopping milk 1
OK

GET shopping milk
1
OK
```

每个“桶”都是一个进程，都有一个进程号(pid)，但是它们没有名字。我们在[进程](http://elixir-lang.org/getting_started/11.html)章节学习过名称注册(name registry),你可能倾向于使用它解决这个问题。例如，我们可以这样创建：

```iex
iex> Agent.start_link(fn -> [] end, name: :shopping)
{:ok, #PID<0.43.0>}
iex> KV.Bucket.put(:shopping, "milk", 1)
:ok
iex> KV.Bucket.get(:shopping, "milk")
1
```

然而，这是一个很可怕的想法！在Elixir中本地名称必须是原子，这也就意味这我们需要将“桶”的名字（经常是从外部客户端接收）转换成原子。因为原子又不会被垃圾回收器回收，所以**我们绝不应该将用户输入转换为原子**。原子一旦被创建，永不被回收。从用户的输入生成原子意味着用户可以注入足够多的不同的名字消耗光内存。通常在消耗光内存之前，原子数量会达到Erlang虚拟机的最大上限，这必然会导致系统down掉。

取而代之，我们将使用一个*注册表进程*来保存”桶“名和pid组成的字典。

这个注册表将会保证永远是最新的状态。例如，如果一个”桶“进程因为一个bug崩溃了，这个注册表必须清理命名字典来避免陈旧的项。在Elixir中，我们说注册表需要*监控(monitor)*每一个”桶“。

我们将使用[通用服务器(GenServer)](http://elixir-lang.org/docs/stable/elixir/GenServer.html)创建一个可以监控”桶“进程的注册表进程。Elixir和Erlang中，通用服务器是构建这样一个通用服务的首选抽象行为。

## 3.1 我们第一个通用服务器

一个通用服务器由两部分实现：单一模块内的客户端API和服务器回调。用以下内容新建`lib/kv/registry.ex`文件：

```elixir
defmodule KV.Registry do
  use GenServer

  ## Client API

  @doc """
  Starts the registry.
  """
  def start_link(opts \\ []) do
    GenServer.start_link(__MODULE__, :ok, opts)
  end

  @doc """
  Looks up the bucket pid for `name` stored in `server`.

  Returns `{:ok, pid}` if the bucket exists, `:error` otherwise.
  """
  def lookup(server, name) do
    GenServer.call(server, {:lookup, name})
  end

  @doc """
  Ensures there is a bucket associated to the given `name` in `server`.
  """
  def create(server, name) do
    GenServer.cast(server, {:create, name})
  end

  ## Server Callbacks

  def init(:ok) do
    {:ok, HashDict.new}
  end

  def handle_call({:lookup, name}, _from, names) do
    {:reply, HashDict.fetch(names, name), names}
  end

  def handle_cast({:create, name}, names) do
    if HashDict.get(names, name) do
      {:noreply, names}
    else
      {:ok, bucket} = KV.Bucket.start_link()
      {:noreply, HashDict.put(names, name, bucket)}
    end
  end
end
```

运行一个新通用服务器的第一个`start_link/1`函数接受三个参数：

1. 服务器回调实现的模块名，本例中的`__MODULE__`,指当前模块。

2. 初始参数，本例中是原子`:ok`。

3. 一个参数列表，例如服务器的名字。

可以给通用服务器发送两种请求：call和cast。call是同步操作，服务器**必须**对这样的请求返回一个响应。cast是异步的，服务器不会发送回应。

接下来俩函数`lookup/2`和`create/2`的职责是向服务器端发送请求。请求将会被表示为`handle_call/3`或`handle_cast/2`的第一个参数。也就是本例中的`{:lookup, name}`和`{:create, name}`。请求通常以元组表示，为了在一个参数里给传递更多的信息。通常用元组第一个元素表示动作，后跟其余信息。

服务器端，我们使用各种回调来完成服务器初始化、终止和处理请求。这些回调都是可选的，目前我们只实现我们关心的就够了。

第一个`init/1`函数回调，接收给予`GenServer.start_link/3`函数的参数，然后返回`{:ok, state}`, state是一个新的哈希字典(`HashDict`)。我们已经注意到，`GenServer`的API如何使客户端/服务器端的区分更明显。`start_link/3`发生在客户端,而`init/1` 是运行在服务器上相应的回调。

对于`call`请求，我们必须实现一个`handle_call/3`回调来接收`request`，从哪儿接收到请求的(`_from`)和当前的服务器的状态(`name`)。`handle_call/3`回调返回一个`{:reply, reply, new_state}`格式的元组，reply发送回客户端，new_state是服务器的新状态。

对于`cast`请求，我们必须实现一个`handle_cast/2`回调来接收`request`请求和当前服务器的状态(`name`)。`handle_cast/2`回调返回`{:noreply, new_state}`格式的元组。

`handle_call/3`和`handle_cast/2`也可以返回其他格式的元组。我们也可以实现`terminate/2`和`code_change/3`回调。欢迎查看[GenServer完整文档](http://elixir-lang.org/docs/stable/elixir/GenServer.html)学习。

现在，让我们写一些测试来保证通用服务器以我们期望的方式工作。

## 3.2 测试通用服务器

测试通用服务器与测试agent没有什么区别。我们将使用setup回调生成一个服务器端进程供测试使用。以下面的内容创建`test/kv/registry_test.exs`文件：

```elixir
defmodule KV.RegistryTest do
  use ExUnit.Case, async: true

  setup do
    {:ok, registry} = KV.Registry.start_link
    {:ok, registry: registry}
  end

  test "spawns buckets", %{registry: registry} do
    assert KV.Registry.lookup(registry, "shopping") == :error

    KV.Registry.create(registry, "shopping")
    assert {:ok, bucket} = KV.Registry.lookup(registry, "shopping")

    KV.Bucket.put(bucket, "milk", 1)
    assert KV.Bucket.get(bucket, "milk") == 1
  end
end
```

我们的测试应该直接通过！

当测试结束的时候，我们简单的向注册表进程发送一个`:shutdown`信号来关闭它。这个方法在测试中没问题，但如果作为程序逻辑的一部分，我们想停止`GenServer`时，最好定义一个`stop/1`函数来发送信息来停止服务器进程。

```elixir
## Client API

@doc """
Stops the registry.
"""
def stop(server) do
  GenServer.call(server, :stop)
end

## Server Callbacks

def handle_call(:stop, _from, state) do
  {:stop, :normal, :ok, state}
end
```

上例中，新的`handle_call/3`函数返回元组`:stop`、服务器停止的原因(`:normal`)、回复客户端`:ok`和服务器目前的状态。

## 3.3 监控需求

注册表功能差不多要完成了。唯一存在的问题是，如果“桶”停止或崩溃了，注册表的状态信息将会变得陈旧。让我们在`KV.RegistryTest`中增加一个测试：

```elixir
test "removes buckets on exit", %{registry: registry} do
  KV.Registry.create(registry, "shopping")
  {:ok, bucket} = KV.Registry.lookup(registry, "shopping")
  Agent.stop(bucket)
  assert KV.Registry.lookup(registry, "shopping") == :error
end
```

上面这个测试将会在最后一个断言处失败，因为即使我们停止了“桶”进程，“桶”名称仍然在注册表进程状态中。

为了修复这个bug，我们需要从“桶”进程开始就进行监控。一旦我们设置好监控，每次“桶”进程退出，注册表都会接收到一个通知。这样我们就可以对状态字典进行清理。

先使用`iex -S mix`打开控制台，调戏下监控器。

```iex
iex> {:ok, pid} = KV.Bucket.start_link
{:ok, #PID<0.66.0>}
iex> Process.monitor(pid)
#Reference<0.0.0.551>
iex> Agent.stop(pid)
:ok
iex> flush()
{:DOWN, #Reference<0.0.0.551>, :process, #PID<0.66.0>, :normal}
```

注意到`Process.monitor(pid)`返回一个唯一的引用，允许我们用它对稍后对收到的信息进行匹配。当我们停止agent之后，可以使用`flush()`激活所有信息，可以看到收到了与这个引用匹配的`:DOWN`信息，告诉我们“桶”进程是正常(`:normal`)退出的。

让我们实现服务器端回调来修复这个bug并通过测试。首先，我们将通用服务器的状态修改成两个字典，一个包含`名称(name)->进程号(pid)`,另一个包含`引用(ref)->名称(name)`。然后在`handle_cast/2`监控“桶”，`handle_info/2`回调处理监控信息。所有的实现细节如下:

```elixir
## Server callbacks

def init(:ok) do
  names = HashDict.new
  refs  = HashDict.new
  {:ok, {names, refs}}
end

def handle_call({:lookup, name}, _from, {names, _} = state) do
  {:reply, HashDict.fetch(names, name), state}
end

def handle_call(:stop, _from, state) do
  {:stop, :normal, :ok, state}
end

def handle_cast({:create, name}, {names, refs}) do
  if HashDict.get(names, name) do
    {:noreply, {names, refs}}
  else
    {:ok, pid} = KV.Bucket.start_link()
    ref = Process.monitor(pid)
    refs = HashDict.put(refs, ref, name)
    names = HashDict.put(names, name, pid)
    {:noreply, {names, refs}}
  end
end

def handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do
  {name, refs} = HashDict.pop(refs, ref)
  names = HashDict.delete(names, name)
  {:noreply, {names, refs}}
end

def handle_info(_msg, state) do
  {:noreply, state}
end
```

可以看到我们能够明显的改变服务器实现,而不必更改任何客户端API。这是一个分割服务器和客户端很明显的好处。

最后，与其他回调不同，我们定义了一个接受所有信息的函数`handle_info/2`来扔掉任何未知的信息。要明白为什么，让我们继续下一节。

## 3.4 使用call, cast或info?

目前为止，我们使用了`handle_call/3`, `handle_cast/2` 和 `handle_info/2`这三个回调函数，决定使用哪个也很简单:

1. `handle_call/3` 必须用于同步请求。当明确需要服务器端发回响应时，它应该默认的选择。

2. `handle_cast/2` 必须用于异步请求，也就是说你不关心是否响应。异步甚至都不保证服务器端能接受到消息，基于这个原因，请谨慎使用。例如，这章定义的`create/2`函数应该使用`cast/2`,我们这里使用`cast/2`只是为了演示。

3. `handle_info/2` 必须用于接收不是`GenServer.call/2`或`GenServer.cast/2`发送的信息，但包括`send/2`发送的正常信息。监控的`:DOWN`消息是一个很好的例子。

因为包括`send/2`在内的任何信息都会由`handle_info/2`处理，所以服务器端可能会收到意料不到的信息。基于此，如果不定义一个接受所有信息(`catch-all`)的条件，这些信息就可能因为无法匹配导致我们的监控者崩溃。

对于`handle_call/3`和`handle_cast/2`无需担心，因为这些消息只能通过`GenServer`的API发送，所以未知信息很可能是由于开发者的错误导致的。

## 3.5 监控(monitor)或链接(link)？

之前我们已经在[进程章节](http://elixir-lang.org/getting_started/11.html)学习过链接(links)。现在又完成了注册表进程，你可能会问，什么时候应该使用监控，什么时候应该使用链接？

链接是双向的。如果你链接了两个进程，其中一个崩溃了，另外一个也会崩溃（非捕获退出）。监控是单独绑定：只有监控者会接收到被监控者的消息。简单来说，想接连崩溃使用链接，只是想收到崩溃或退出消息使用监控。

回到我们实现的`handle_cast/2`，你可以看到注册表进程同时链接和监控着“桶”:

```elixir
{:ok, pid} = KV.Bucket.start_link()
ref = Process.monitor(pid)
```

这是个糟糕的想法，因为我们不想在“桶”崩溃的时候注册表进程也崩溃！当谈到监控者的时候我们将探索这个问题的解决方法。概括来说，我们通常直接避免创建新的进程,而是将这个任务交给监控者。我们将看到，监控者是使用链接的，这也就解释了为什么基于链接的API在Elixir和OTP中如此普遍。

在我们讲监控者之前,我们先学习通用事件（GenEvent）的事件管理器和事件处理器。