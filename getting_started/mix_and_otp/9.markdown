这一章，我们将实现第一章描述的解析命令的代码：

```
CREATE shopping
OK

PUT shopping milk 1
OK

PUT shopping eggs 3
OK

GET shopping milk
1
OK

DELETE shopping eggs
OK
```

解析完成后，将更新我们的服务器，分派解析过的命令到之前写好的`:kv`程序。

## 9.1 文档测试（Doctests）

在语言主页，我们提到，在Elixir中文档是一等公民。本教程中，通过`mix help`或输入`h Enum`或IEx控制台中其他模块，已经多次接触了这个概念。

这一节，我们将使用文档测试实现解析的功能，文档测试允许在文档中编写测试，给文档提供更准确的示例代码。

在`lib/kv_server/command.ex`创建我们的命令解析器，从文档测试开始：

```elixir
defmodule KVServer.Command do
  @doc ~S"""
  Parses the given `line` into a command.

  ## Examples

      iex> KVServer.Command.parse "CREATE shopping\r\n"
      {:ok, {:create, "shopping"}}

  """
  def parse(line) do
    :not_implemented
  end
end
```

文档测试是文档内，指定四个空格缩进，紧随`iex>`提示之后的字符。和在IEx一样，如果一个命令跨越多行，你可以使用`...>`。期望的结果以`iex>`或`...>`之后的下一行开始，以新的一行或新的`iex>`前缀为止。

另一个需要注意的是我们使用了`@doc ~S"""`作为文档字符串的开始。`~S`为了防止在测试中将`\r\n`字符转换为一个回车和换行。

为了运行文档测试，我们创建一个`test/kv_server/command_test.exs`文件，然后在测试用例中调用`doctest KVServer.Command`：

```elixir
defmodule KVServer.CommandTest do
  use ExUnit.Case, async: true
  doctest KVServer.Command
end
```

执行测试，文档测试应该失败：

    1) test doc at KVServer.Command.parse/1 (1) (KVServer.CommandTest)
       test/kv_server/command_test.exs:3
       Doctest failed
       code: KVServer.Command.parse "CREATE shopping\r\n" === {:ok, {:create, "shopping"}}
       lhs:  :not_implemented
       stacktrace:
         lib/kv_server/command.ex:11: KVServer.Command (module)

太好了！

现在的问题是让文档测试通过。让我们实现`parse/1`函数:

```elixir
def parse(line) do
  case String.split(line) do
    ["CREATE", bucket] -> {:ok, {:create, bucket}}
  end
end
```

代码实现的方法是简单对列表进行空白分割并匹配命令。使用`String.split/1`以为着我们的命令将会是空格敏感的。前面、后面和连续的空格都无所谓。让我们添加一些新的文档测试，测试这些行为和其他的命令:

```elixir
@doc ~S"""
Parses the given `line` into a command.

## Examples

    iex> KVServer.Command.parse "CREATE shopping\r\n"
    {:ok, {:create, "shopping"}}

    iex> KVServer.Command.parse "CREATE  shopping  \r\n"
    {:ok, {:create, "shopping"}}

    iex> KVServer.Command.parse "PUT shopping milk 1\r\n"
    {:ok, {:put, "shopping", "milk", "1"}}

    iex> KVServer.Command.parse "GET shopping milk\r\n"
    {:ok, {:get, "shopping", "milk"}}

    iex> KVServer.Command.parse "DELETE shopping eggs\r\n"
    {:ok, {:delete, "shopping", "eggs"}}

Unknown commands or commands with the wrong number of
arguments return an error:

    iex> KVServer.Command.parse "UNKNOWN shopping eggs\r\n"
    {:error, :unknown_command}

    iex> KVServer.Command.parse "GET shopping\r\n"
    {:error, :unknown_command}

"""
```

针对目前的文档测试，轮到你来让测试通过了！一旦准备好了，将你的成果和下面的解决方法比较：

```elixir
def parse(line) do
  case String.split(line) do
    ["CREATE", bucket] -> {:ok, {:create, bucket}}
    ["GET", bucket, key] -> {:ok, {:get, bucket, key}}
    ["PUT", bucket, key, value] -> {:ok, {:put, bucket, key, value}}
    ["DELETE", bucket, key] -> {:ok, {:delete, bucket, key}}
    _ -> {:error, :unknown_command}
  end
end
```

请注意我们是如何在没有使用`if/else`语句检查命令名称和参数数量的情况下完美的解析这些命令的。

最后，我们的测试用例报告了总共有七个测试，你可能注意到了每个文档测试都会被当做一个不同的测试。因为ExUnit将下面的代码看做不同的测试：

```iex
iex> KVServer.Command.parse "UNKNOWN shopping eggs\r\n"
{:error, :unknown_command}

iex> KVServer.Command.parse "GET shopping\r\n"
{:error, :unknown_command}
```

像下面这样，没有新行的话ExUnit将它们编译为一个测试：

```iex
iex> KVServer.Command.parse "UNKNOWN shopping eggs\r\n"
{:error, :unknown_command}
iex> KVServer.Command.parse "GET shopping\r\n"
{:error, :unknown_command}
```

你可以在[`ExUnit.DocTest`文档](http://elixir-lang.org/docs/stable/ex_unit/ExUnit.DocTest.html)阅读到更多信息。
## 9.2 管道符

使用目前的解析方法， 我们终于可以开始实现执行这些命令的逻辑。让我们现在增加一个预定义的函数：

```elixir
defmodule KVServer.Command do
  @doc """
  Runs the given command.
  """
  def run(command) do
    {:ok, "OK\r\n"}
  end
end
```

实现这个函数之前，让我们修改服务器，使用新的`parse/1`和`run/1`函数启动。记住，当客户端关闭的时候`read_line`函数就会崩溃，所以让我们先修改它。打开`lib/kv_server/ex`文件，将已存在的服务器定义：

```elixir
defp serve(socket) do
  socket
  |> read_line()
  |> write_line(socket)

  serve(socket)
end

defp read_line(socket) do
  {:ok, data} = :gen_tcp.recv(socket, 0)
  data
end

defp write_line(line, socket) do
  :gen_tcp.send(socket, line)
end
```

替换为：

```elixir
defp serve(socket) do
  msg =
    case read_line(socket) do
      {:ok, data} ->
        case KVServer.Command.parse(data) do
          {:ok, command} ->
            KVServer.Command.run(command)
          {:error, _} = err ->
            err
        end
      {:error, _} = err ->
        err
    end

  write_line(socket, msg)
  serve(socket)
end

defp read_line(socket) do
  :gen_tcp.recv(socket, 0)
end

defp write_line(socket, msg) do
  :gen_tcp.send(socket, format_msg(msg))
end

defp format_msg({:ok, text}), do: text
defp format_msg({:error, :unknown_command}), do: "UNKNOWN COMMAND\r\n"
defp format_msg({:error, _}), do: "ERROR\r\n"
```

如果启动服务器，我们就可以给它发送命令。目前我们将会得到两种不同的回应：命令已知时的“OK”和其他情况的"UNKNOWN COMMAND":

    $ telnet 127.0.0.1 4040
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    CREATE shopping
    OK
    HELLO
    UNKNOWN COMMAND

也就意味这我们在正确的方向上，但是看上去不是那么优雅，是不？

之前使用管道符的实现逻辑简单易懂：

```elixir
read_line(socket) |> KVServer.Command.parse |> KVServer.Command.run()
```

伴随着错误，我们需要管道符逻辑匹配错误输出并终止它们。“当响应是`:ok`或匹配`{:ok, _}`元组的时候，传递这些函数。”这么说是不是更好一点？

谢天谢地，有个叫[elixir-pipes](https://github.com/batate/elixir-pipes)的项目提供了这个功能！让我们试一试。

打开`apps/kv_server/mix.exs`文件然后更改`application/0`和`deps/0`函数如下：

```elixir
def application do
  [applications: [:pipe, :kv],
   mod: {KVServer, []}]
end

defp deps do
  [{:kv, in_umbrella: true},
   {:pipe, github: "batate/elixir-pipes"}]
end
```

执行`mix deps.get`获取依赖，然后使用现在可用的`pipe_matching/3`函数重写`serve/1`：

```elixir
defp serve(socket) do
  import Pipe

  msg =
    pipe_matching x, {:ok, x},
      read_line(socket)
      |> KVServer.Command.parse()
      |> KVServer.Command.run()

  write_line(socket, msg)
  serve(socket)
end
```

使用`pipe_matching/3`可以让Elixir将每一步如果匹配`{:ok. x}`的`x`传递。我们基本上是将每一个`case/2`表达式转换为一个管道操作。只要任何步骤与`{:ok,x}`不匹配，管道将终止并返回不匹配的值。

太棒了！随便阅读[elixir-pipes](https://github.com/batate/elixir-pipes)项目文档学习表达管道符的其他选项。让我们继续实现服务器。

## 9.3 执行命令

最后一步是实现`KVServer.Command.run/1`函数，使用`:kv`程序执行解析过的命令。方法如下所示：

```elixir
@doc """
Runs the given command.
"""
def run(command)

def run({:create, bucket}) do
  KV.Registry.create(KV.Registry, bucket)
  {:ok, "OK\r\n"}
end

def run({:get, bucket, key}) do
  lookup bucket, fn pid ->
    value = KV.Bucket.get(pid, key)
    {:ok, "#{value}\r\nOK\r\n"}
  end
end

def run({:put, bucket, key, value}) do
  lookup bucket, fn pid ->
    KV.Bucket.put(pid, key, value)
    {:ok, "OK\r\n"}
  end
end

def run({:delete, bucket, key}) do
  lookup bucket, fn pid ->
    KV.Bucket.delete(pid, key)
    {:ok, "OK\r\n"}
  end
end

defp lookup(bucket, callback) do
  case KV.Registry.lookup(KV.Registry, bucket) do
    {:ok, pid} -> callback.(pid)
    :error -> {:error, :not_found}
  end
end
```

实现很简单：我们只需要将命令分发到`:kv`程序启动时注册的`KV.Registry`注册表服务器。

注意我们也定义了一个叫`lookup/2`的私有函数来实现查找“桶”的通用功能，如果存在，返回`pid`，否则`{:error, :not_found}`。

顺便说下，因为现在返回`{:error, :not_found}`,我们修改在`KV.Server`中的`format_msg/1`函数来更好的显示没有找到的消息：

```elixir
defp format_msg({:ok, text}), do: text
defp format_msg({:error, :unknown_command}), do: "UNKNOWN COMMAND\r\n"
defp format_msg({:error, :not_found}), do: "NOT FOUND\r\n"
defp format_msg({:error, _}), do: "ERROR\r\n"
```

服务器功能快完成了!我们只需要增加测试。这一次，因为还有一些重要的决定要做，我们留下了最后的测试 。

`KVServer.Command.run/1`的实现是直接发送命令到在`:kv`程序中注册的，叫`KV.Registry`的服务器。意思是这个服务器是全局的，如果同一时间有两个测试发送消息，测试将会冲突（很可能测试失败）。需要决定是做有隔离的异步执行单元测试，还是在全局状态之上写集成测试，毕竟测试全栈程序意味在生产环境中进行。

现在我们选择使用单元测试的方法。例如，我们需要修改代码让`KVServer.Command.run/1`可测试，得给服务器传递参数而不是直接向`KV.Registry`进程发送命令。意味着我们需要把`run`修改为`def run(command, pid)`，`:create`命令如下所示：


```elixir
def run({:create, bucket}, pid) do
  KV.Registry.create(pid, bucket)
  {:ok, "OK\r\n"}
end
```

在`KVServer.Command`测试用例中，我们需要启动一个`KV.Registry`实例。和在`apps/kv/test/kv/registry_test.exs`测试中所做的类似，将它作为参数传递给`run/2`。

目前我们测试使用的方法，有以下几个好处：

1. 我们的实现没有和任意一个特殊的服务器名耦合。
2. 我们可以让测试异步执行，因为无状态共享。

然而，不好的方面是为了适应所有外部参数，我们的API变的很大。

另一个方法是继续使用全局服务器名，对全局数据进行测试，并确保测试之间进行数据清理。这种情况会测试整个栈，从TCP服务器、命令解析和执行、到注册表和“桶”进程，所以它就成了集成测试。

集成测试缺点是比单元测试慢，因此要尽量少用。例如，我们不应该使用集成测试来测试我们命令解析的边界用例。

鉴于我们之前用过单元测试，这次选择另一条路，写集成测试。集成测试使用一个向服务器发送命令的TCP客户端，然后断言得到我们想要的回应。

让我们在`test/kv_server_test.exs`中实现集成测试，代码如下：

```elixir
defmodule KVServerTest do
  use ExUnit.Case

  setup do
    :application.stop(:kv)
    :ok = :application.start(:kv)
  end

  setup do
    opts = [:binary, packet: :line, active: false]
    {:ok, socket} = :gen_tcp.connect('localhost', 4040, opts)
    {:ok, socket: socket}
  end

  test "server interaction", %{socket: socket} do
    assert send_and_recv(socket, "UNKNOWN shopping\r\n") ==
           "UNKNOWN COMMAND\r\n"

    assert send_and_recv(socket, "GET shopping eggs\r\n") ==
           "NOT FOUND\r\n"

    assert send_and_recv(socket, "CREATE shopping\r\n") ==
           "OK\r\n"

    assert send_and_recv(socket, "PUT shopping eggs 3\r\n") ==
           "OK\r\n"

    # GET returns two lines
    assert send_and_recv(socket, "GET shopping eggs\r\n") == "3\r\n"
    assert send_and_recv(socket, "") == "OK\r\n"

    assert send_and_recv(socket, "DELETE shopping eggs\r\n") ==
           "OK\r\n"
  end

  defp send_and_recv(socket, command) do
    :ok = :gen_tcp.send(socket, command)
    {:ok, data} = :gen_tcp.recv(socket, 0, 1000)
    data
  end
end
```

我们的集成测试检查所有与服务器的交互,包括了未知命令和未找到错误。值得注意的是，因为ETS表和链接的进程，我们不需要关闭socket。一旦测试进程退出，socket也就自动关闭了。

因为这次测试依赖于全局数据，我们没有给`use ExUnit.Case`添加`async: true`选项。进一步讲，为了保证测试总是处于干净的状态，测试之前我们先停止再启动`:kv`程序。实际上，停止`:kv`程序甚至在终端打印出了告警：

```
18:12:10.698 [info] Application kv exited with reason :stopped
```

如果需要，我们可以避免打印这个告警信息，在测试的setup回调中关闭`error_logger`：

```elixir
setup do
  Logger.remove_backend(:console)
  Application.stop(:kv)
  :ok = Application.start(:kv)
  Logger.add_backend(:console, flush: true)
  :ok
end
```

通过这个简单的集成测试，我们开始了解为什么集成测试会变慢。这个测试不仅不能异步执行，而且需要设置很耗时间的停止和启动`:kv`程序。

最后，对你程序来说，什么是最佳的测试策略，取决与你和你的team。你需要在代码质量、信心和测试用例的时间之间找到平衡点。例如，初期可以只使用集成测试来测试，但服务器在之后的版本中不断变大，或它成为经常有bug的程序的一部分的时候，考虑将它分割，写一些没有集成测试那么重的、更密集的单元测试就变的非常重要。

我个人更愿意使用单元测试，只有在做烟雾测试保证系统基本功能的情况下使用集成测试。

下一章，我们将最后增加一个分布式“桶”路由机制，同时也会学习配置程序。