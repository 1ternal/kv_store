目前为止，我们的程序有一个事件管理器和一个注册表。对于“桶”进程，它可能不需要一百个也需要一打。虽然我们可能会认为我们的实现到目前为止很不错，但是天下没有无bug的软件，失败也一定会发生。

当失败发生的时候，你的一个反应可能是：”让我们纠错“。但是，在elixir入门指南中我们了解到，与其他语言不同的是，elixir中我们没有防御性编程的习惯来纠错。反而，我们说，“快速失败”和“让它崩溃”。如果有bug导致我们的注册表崩溃，不用担心，因为我们将会设置一个监控者来重新启动一个全新的注册表副本。

这一章，我们将要学习监控者(supervisors)和程序(applicatioins)。我们将创建不止一个，而是两个监控者来监控我们的进程。

## 5.1 我们第一个监控者

创建一个监控者与创建一个通用服务器没有什么不同。我们将使用[监控者(supervisor)](http://elixir-lang.org/docs/stable/elixir/Supervisor.html)行为模式在`lib/kv/supervisor.ex`文件中定义一个叫`KV.Supervisor`模块:

```elixir
defmodule KV.Supervisor do
  use Supervisor

  def start_link do
    Supervisor.start_link(__MODULE__, :ok)
  end

  @manager_name KV.EventManager
  @registry_name KV.Registry

  def init(:ok) do
    children = [
      worker(GenEvent, [[name: @manager_name]]),
      worker(KV.Registry, [@manager_name, [name: @registry_name]])
    ]

    supervise(children, strategy: :one_for_one)
  end
end
```

我们的监控器有两个子进程:事件管理器和注册表。常见的做法是给监控下的进程命名，这样其他的进程不用知道进程号，使用名称就可以访问它们了。这很有用，因为被监控的进程可能会崩溃，进程重启后它的进程号就会改变。我们使用模块属性`@manager_name`和`@registry_name`声明了监控的子进程，然后在worker定义中引用了它们。尽管使用模块属性声明监控的子进程不是必须的，但这么做代码清晰，容易阅读。

例如，`KV.Registry`worker接收两个参数，第一个是时间管理器的名字，第二个是选项关键字列表(keyword list)。示例中我们设置选项为`[name: KV.Registry]`(使用我们之前定义过的模块属性`@registry_name`),来保证程序中我们可以使用`KV.Registry`名称获取到注册表。通常在模块定义好之后再将其命名为监控器的子进程，这样在一个实时的系统进行debug就很容易。

监控器中定义监控子进程的顺序也非常重要。因为注册表依赖与事件管理器，我们必须先启动后者再启动前者。这也就是子进程列表中通用事件管理器`GenEvent`必须在注册表`KV.Registry`之前的原因。

最后，我们将子进程列表和策略`:one_for_one`传递给`supervise/2`函数调用。

当子进程崩溃的时候，监控器的策略决定怎么做。`:one_for_one`意味着当一个子进程挂了，只会重启一个代替它的进程。这个策略目前能说通。如果事件管理器崩溃了，没有理由去重启注册表，反过来也一样。然而，一旦我们增加更多的子进程，这些可能就会发生变化。本节稍后会讨论到监控器`Supervisor`行为所支持多种不同的策略。

如果我们在项目目录下使用`iex -S mix`打开终端，我们可以手动启动监控器：

```iex
iex> KV.Supervisor.start_link
{:ok, #PID<0.66.0>}
iex> KV.Registry.create(KV.Registry, "shopping")
:ok
iex> KV.Registry.lookup(KV.Registry, "shopping")
{:ok, #PID<0.70.0>}
```

当我们启动监控树后，事件管理器和注册表子进程也都自动启动了，也就不需要我们手动启动进程来创建“桶”了。

实战中，我们很少手动启动监控树，取而代之的是作为程序的一部分以回调方式启动。

## 5.2 理解程序

我们一直在一个程序里工作。每次我们更改一个文件然后执行`mix compile`，会看到`Generated kv.app`这样一个编译信息输出。

我们可以在`_build/dev/lib/kv/ebin/kv.app`找到生成的`.app`文件。让我们看一看它的内容：

```erlang
{application,kv,
             [{registered,[]},
              {description,"kv"},
              {applications,[kernel,stdlib,elixir,logger]},
              {vsn,"0.0.1"},
              {modules,['Elixir.KV','Elixir.KV.Bucket',
                        'Elixir.KV.Registry','Elixir.KV.Supervisor']}]}.
```

这个文件包含了Erlang数据（使用erlang语法写成）。尽管我们对erlang不是很熟悉，也很容易猜到这个文件保存了我们程序的定义。它包含了我们程序的版本`version`，所有定义过的模块和一个程序依赖列表，比如erlang的`kernel`和`elixir`本身，还有在`mix.exs`程序列表中指定的`logger`。

每次对程序增加新模块的时候手动更新这个文件实在是太无聊。这也就是为什么mix为我们生成和维护它的原因。

通过修改`mix.exs`文件中`application/0`函数的返回值，我们就可以自定义这个`.app`文件。接下来一节将会讲到这些内容。

### 5.2.1 启动程序

定义一个程序定义`.app`文件后，我们就可以以整体的方式启动和停止它。

1. Mix为我们自动启动当前的程序

2. 即使Mix不启动我们的程序，我们的程序在启动时也不需要做任何事情。

不管怎样，让我们看看mix如何为我们启动程序。让我们使用`iex -S mix`启动项目终端然后尝试下面命令：

```iex
iex> Application.start(:kv)
{:error, {:already_started, :kv}}
```

噢，它已经启动了。

我们可以使用选项让它不要启动程序。尝试执行`iex -S mix run --no-start`：

```elixir
iex> Application.start(:kv)
{:error, {:not_started, :logger}}
```

因为程序`:kv`的依赖（本例中是`:logger`)没有启动，所以这里会有个错误。Mix一般根据`mix.exs`定义，按程序的依赖层级依次启动。如果依赖于其他程序，它们也是这么做。但是因为我们传递了`--no-start`标记,这就要求我们要不按照正确的顺序手动启动，要不就像下面这样调用`Application.ensure_all_started`启动：

```elixir
iex> Application.ensure_all_started(:kv)
{:ok, [:logger, :kv]}
iex> Application.stop(:kv)
18:12:10.698 [info] Application kv exited :stopped
:ok
```

没有特别让人兴奋的事情发生，但是它告诉我们怎样控制程序。

> 当你执行`iex -S mix`，相当于执行了`iex -S mix run`。所以当你开启mix时如果需要传递更多选项，你只需要输入`mix run`然后传递任何`run`命令能接收的选项。在终端中执行`mix help run`，你就可以找到更多关于`run`的信息。

### 5.2.2 程序回调

我们花费了很多时间谈论如果启动和停止程序，肯定有方法让程序开始的时候干写有用的事。确实，还真有！

We can specify an application callback function. This is a function that will be invoked when the application starts. The function must return a result of `{:ok, pid}`, where `pid` is the process identifier of a supervisor process.
我们可以指定一个程序回调函数。这个函数将会在启动时被调用。这个函数必须返回一个`{:ok, pid}`结果，pid就是监控器的进程号。

我们可以分两步设置程序回调。首先打开`mix.exs`文件，修改`def application`成如下内容：

```elixir
def application do
  [applications: [],
   mod: {KV, []}]
end
```

`:mod`选项代表“程序回调模块”(application callback module),后跟程序启动时传递的参数。程序回调函数可以是任何实现了[程序](http://elixir-lang.org/docs/stable/elixir/Application.html)抽象行为的模块。

现在我们指定`KV`为回调模块，我们需要修改`lib/kv.ex`文件中的`KV`模块定义：

```elixir
defmodule KV do
  use Application

  def start(_type, _args) do
    KV.Supervisor.start_link
  end
end
```

当我们`use Application`,我们只需要定义一个`start/2`函数。如果我们需要在程序停止的时候指定自定义行为，我们可以再定义一个`stop/1`函数。本例中，被`use Application`自动定义这个函数就够了。

让我们再次使用`iex -S mix`打开项目控制台。将会看到一个叫`KV.Registry`的进程已经在运行了：

```iex
iex> KV.Registry.create(KV.Registry, "shopping")
:ok
iex> KV.Registry.lookup(KV.Registry, "shopping")
{:ok, #PID<0.88.0>}
```

太棒了!

### 5.2.3 项目还是程序?

Mix使得项目与程序之间有了区别。基于`mix.exs`文件当前的内容，可以说我们有一个定义了`:kv`程序的Mix项目。稍后的章节将看到，也会有不包含任何程序的项目。

当我们说“项目”的时候，你应该知道我们谈论的是Mix项目。Mix是一个项目管理工具，知道如何对你的项目进行编译和测试，也知道如何编译并启动与你的项目有关的应用程序。

当我们说程序的时候，我们谈论的是OTP。在运行时，程序是作为一个整体启动和停止的实体。你可以在[程序模块文档](http://elixir-lang.org/docs/stable/elixir/Application.html)了解更多信息，也可以执行`mix help compile.app` 来了解更多关于`def application`支持的选项。

## 5.3 简单一对一监控

我们已经成功定义了作为程序生命周期的一部分的能自动启动（和停止）的监控器。

然而还记得的是在`handle_cast/2`回调中`KV.Registry`是同时链接和监控“桶”进程的。

```elixir
{:ok, pid} = KV.Bucket.start_link()
ref = Process.monitor(pid)
```

链接是双向绑定，也就是说“桶”进程崩溃了注册表进程也就崩溃。尽管我们使用了监控器，会保证注册表进程会重新运行，但是注册表进程的崩溃就意味着我们将会丢失与之链接的“桶”进程的数据。

换句话说，就算“桶”进程崩溃了，我们还是想让注册表进程一直处于运行的状态。让我们写一个测试：

```elixir
test "removes bucket on crash", %{registry: registry} do
  KV.Registry.create(registry, "shopping")
  {:ok, bucket} = KV.Registry.lookup(registry, "shopping")

  # Kill the bucket and wait for the notification
  Process.exit(bucket, :shutdown)
  assert_receive {:exit, "shopping", ^bucket}
  assert KV.Registry.lookup(registry, "shopping") == :error
end
```

除了有点糙之外，这个测试跟“退出时移除桶进程”很类似。不同之处在于，我们给“桶”进程发送了退出信号，而不是使用`Agent.stop/1`。因为“桶”进程是链接到注册表的，而注册表又链接了测试进程，杀掉“桶”进程会造成注册表进程崩溃，转而造成测试进程也崩溃：

```
1) test removes bucket on crash (KV.RegistryTest)
   test/kv/registry_test.exs:52
   ** (EXIT from #PID<0.94.0>) shutdown
```

一个可能移除注册表与桶进程链接的方法是提供一个调用`Agent.start/1`的`KV.Bucket.start/0`函数，然后注册表使用它。然而，这也不是个好想法，因为这样更改以后，“桶”不会链接道任何一个进程上，会造成如果有人停止了`kv`程序，所有的“桶”进程都将运行着，但都无法访问。

我们将新定义一个的监控器用来生成、监控这些“桶”。有个叫`:simple_one_for_one`监控策略完美匹配现在的情况：它允许指定一个worker模板,监控多个基于此模板生成的子进程。

以下面的内容定义我们的`kV.Bucket.Supervior`:

```elixir
defmodule KV.Bucket.Supervisor do
  use Supervisor

  def start_link(opts \\ []) do
    Supervisor.start_link(__MODULE__, :ok, opts)
  end

  def start_bucket(supervisor) do
    Supervisor.start_child(supervisor, [])
  end

  def init(:ok) do
    children = [
      worker(KV.Bucket, [], restart: :temporary)
    ]

    supervise(children, strategy: :simple_one_for_one)
  end
end
```

跟第一个监控器相比有两个地方不同。

首先，我们定义了一个`start_bucket/1`函数，它接受一个监控器和开启一个作为子进程的“桶”进程。`start_bucket/1`是代替直接调用`KV.Bucket.start_link`、直接在注册表中调用的函数。

其次，在`init/1`回调中，我们将子进程标记为`:temporary`。也就是说如果“桶”进程挂了不会重启！这是因为我们只是用监控器行为来作为分组“桶”进程的机制。“桶”进程的创建还是要传递到注册表。

运行`iex -S mix`，我们可以尝试下新的监控器：

```iex
iex> {:ok, sup} = KV.Bucket.Supervisor.start_link
{:ok, #PID<0.70.0>}
iex> {:ok, bucket} = KV.Bucket.Supervisor.start_bucket(sup)
{:ok, #PID<0.72.0>}
iex> KV.Bucket.put(bucket, "eggs", 3)
:ok
iex> KV.Bucket.get(bucket, "eggs")
3
```

让我们修改注册表来和“桶”监控者一起工作。与事件管理器相同，我们将直接的传递“桶”监控的进程号给`KV.Registry.start_link/3`。让我们修改`test/kv/registry_test.exs`测试文件的setup回调：

```elixir
setup do
  {:ok, sup} = KV.Bucket.Supervisor.start_link
  {:ok, manager} = GenEvent.start_link
  {:ok, registry} = KV.Registry.start_link(manager, sup)

  GenEvent.add_mon_handler(manager, Forwarder, self())
  {:ok, registry: registry}
end
```

现在修改相应的`KV.Registry`函数来让新监控器工作：

```elixir
## Client API

@doc """
Starts the registry.
"""
def start_link(event_manager, buckets, opts \\ []) do
  # 1. Pass the buckets supevisor as argument
  GenServer.start_link(__MODULE__, {event_manager, buckets}, opts)
end

## Server callbacks

def init({events, buckets}) do
  names = HashDict.new
  refs  = HashDict.new
  # 2. Store the buckets supevisor in the state
  {:ok, %{names: names, refs: refs, events: events, buckets: buckets}}
end

def handle_cast({:create, name}, state) do
  if HashDict.get(state.names, name) do
    {:noreply, state}
  else
    # 3. Use the buckets supervisor instead of starting buckets directly
    {:ok, pid} = KV.Bucket.Supervisor.start_bucket(state.buckets)
    ref = Process.monitor(pid)
    refs = HashDict.put(state.refs, ref, name)
    names = HashDict.put(state.names, name, pid)
    GenEvent.sync_notify(state.events, {:create, name, pid})
    {:noreply, %{state | names: names, refs: refs}}
  end
end
```

修改过后我们的测试应该就能通过了！为完成我们的任务,我们只需要更新我们的监控器并将“桶”作为子进程进行监控。

## 5.4 监控树

为了在程序中使用“桶”监控器，我们需要将它以子进程加入`KV.Supervisor`监控器。注意到，我们将开始在监控器中监控其他的监控器，正式的叫法是"监控树"。

打开`lib/kv/supervisor.ex`文件，给桶监控器增加一个模块属性，以下列内容修改`init/1`函数：

```elixir
@manager_name KV.EventManager
@registry_name KV.Registry
@bucket_sup_name KV.Bucket.Supervisor

def init(:ok) do
  children = [
    worker(GenEvent, [[name: @manager_name]]),
    supervisor(KV.Bucket.Supervisor, [[name: @bucket_sup_name]]),
    worker(KV.Registry, [@manager_name, @bucket_sup_name, [name: @registry_name]])
  ]

  supervise(children, strategy: :one_for_one)
end
```

这次我们以`KV.Bucket.Supervisor`命名（同样的，与模块同名）把它作为子进程加入到监控器中。也更新了`KV.Registry`worker，以接收"桶"进程名称为参数。

同时要记住的是，子进程宣告的顺序非常重要。注册表进程依赖于“桶”监控器，所以在子进程列表内，“桶”进程必须列在注册表进程之前。

因为我们给监控器增加了更多子进程，重新验证`:one_for_one`策略的正确性非常重要。目前看到的一个瑕疵点是注册表和“桶”监控器之间的关系。如果注册表挂了，“桶”监控器也必须挂，因为一旦注册表挂了，所有关于与“桶”名关联的信息都会丢失。就算“桶”监控器还没挂，这些“桶”也不可能连接的上。

我们可以考虑使用另外一种策略`:one_for_all`。任意一个子进程挂了，`:one_for_all`策略会重启所有的子进程。这也不合适，因为注册表挂了不应该影响事件管理器。实际上，这么做很有可能造成危害，因为事件管理器挂了将会造成所有事件处理器被移除。

另一个可能的解决这个问题的方法是新建一个使用`:one_for_all`策略的监控器来监控注册表和“桶”监控器，然后让根监控器以`:one_for_one`策略监控事件管理器和这个新监控器。这个树形将会是下面这样的格式：

```
* root supervisor [one_for_one]
  * event manager
  * supervisor [one_for_all]
    * buckets supervisor [simple_one_for_one]
      * buckets
    * registry
```

你可以尝试使用这个新监控树，但是我们就到这儿了。因为下一章我们将修改注册表让它可以持久化注册表的数据，对于使用`:one_for_one`策略，这是一个完美的搭配。

记住，对于`worker/2`, `supervisor/2` 和 `supervise/2`函数，还有其他的策略和选项可供使用，所以不要了查看[监控器模块文档](http://elixir-lang.org/docs/stable/elixir/Supervisor.html)